// frontend/src/pages/ProblemsMapPage.tsx
import React, { useState, useEffect } from 'react';

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const mockProblems = [
  {
    id: 1,
    type: 'road',
    title: '–Ø–º–∞ –Ω–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π —É–ª–∏—Ü–µ',
    address: '—É–ª. –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è, 25',
    status: 'new',
    date: '2024-01-15'
  },
  {
    id: 2,
    type: 'light',
    title: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ñ–æ–Ω–∞—Ä—å',
    address: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫',
    status: 'in_progress',
    date: '2024-01-14'
  },
  {
    id: 3,
    type: 'garbage',
    title: '–ù–µ–≤—ã–≤–µ–∑–µ–Ω–Ω—ã–π –º—É—Å–æ—Ä',
    address: '—É–ª. –ú–æ—Å–∫–æ–≤—Å–∫–∞—è, 10',
    status: 'resolved',
    date: '2024-01-13'
  }
];

const ProblemsMapPage: React.FC = () => {
  const [problems, setProblems] = useState(mockProblems);
  const [selectedType, setSelectedType] = useState('all');

  const problemTypes = [
    { value: 'all', label: '–í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã' },
    { value: 'road', label: '–Ø–º—ã –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö' },
    { value: 'light', label: '–°–ª–æ–º–∞–Ω–Ω—ã–µ —Ñ–æ–Ω–∞—Ä–∏' },
    { value: 'garbage', label: '–ú—É—Å–æ—Ä' },
    { value: 'water', label: '–í–æ–¥–æ–ø—Ä–æ–≤–æ–¥' },
    { value: 'tree', label: '–î–µ—Ä–µ–≤—å—è' }
  ];

  const filteredProblems = selectedType === 'all' 
    ? problems 
    : problems.filter(problem => problem.type === selectedType);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'new': return '#ff6b6b';
      case 'in_progress': return '#ffa726';
      case 'resolved': return '#66bb6a';
      default: return '#9e9e9e';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'new': return '–ù–æ–≤–∞—è';
      case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'resolved': return '–†–µ—à–µ–Ω–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'road': return 'üï≥Ô∏è';
      case 'light': return 'üí°';
      case 'garbage': return 'üóëÔ∏è';
      case 'water': return 'üíß';
      case 'tree': return 'üå≥';
      default: return '‚ùì';
    }
  };

  return (
    <div>
      <div className="card">
        <h2>–ö–∞—Ä—Ç–∞ –ø—Ä–æ–±–ª–µ–º –í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∞</h2>
        
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="form-group">
          <label>–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º—ã:</label>
          <select 
            value={selectedType} 
            onChange={(e) => setSelectedType(e.target.value)}
          >
            {problemTypes.map(type => (
              <option key={type.value} value={type.value}>
                {type.label}
              </option>
            ))}
          </select>
        </div>

        {/* –ó–∞–≥–ª—É—à–∫–∞ –∫–∞—Ä—Ç—ã */}
        <div style={{ 
          background: 'linear-gradient(145deg, #e0e0e0, #f5f5f5)',
          height: '400px', 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center',
          borderRadius: '8px',
          marginBottom: '2rem',
          border: '2px dashed #ccc',
          flexDirection: 'column',
          gap: '1rem'
        }}>
          <div style={{ fontSize: '3rem' }}>üó∫Ô∏è</div>
          <p style={{ textAlign: 'center', color: '#666' }}>
            –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏<br />
            (–Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã / Google Maps)
          </p>
          <button className="btn btn-secondary">
            üìç –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </button>
        </div>

        {/* –õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã */}
        <div style={{ 
          display: 'flex', 
          gap: '2rem', 
          justifyContent: 'center',
          marginBottom: '2rem',
          flexWrap: 'wrap'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ width: '12px', height: '12px', backgroundColor: '#ff6b6b', borderRadius: '50%' }}></div>
            <span>–ù–æ–≤—ã–µ</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ width: '12px', height: '12px', backgroundColor: '#ffa726', borderRadius: '50%' }}></div>
            <span>–í —Ä–∞–±–æ—Ç–µ</span>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
            <div style={{ width: '12px', height: '12px', backgroundColor: '#66bb6a', borderRadius: '50%' }}></div>
            <span>–†–µ—à–µ–Ω—ã</span>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º */}
      <div className="card">
        <h3>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º ({filteredProblems.length})</h3>
        
        {filteredProblems.map(problem => (
          <div 
            key={problem.id}
            style={{
              border: '1px solid #e0e0e0',
              borderRadius: '8px',
              padding: '1rem',
              margin: '1rem 0',
              backgroundColor: '#fafafa'
            }}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                <span style={{ fontSize: '1.5rem' }}>{getTypeIcon(problem.type)}</span>
                <div>
                  <h4 style={{ margin: '0 0 0.5rem 0' }}>{problem.title}</h4>
                  <p style={{ margin: 0, color: '#666' }}>üìç {problem.address}</p>
                  <small style={{ color: '#999' }}>–°–æ–∑–¥–∞–Ω–æ: {problem.date}</small>
                </div>
              </div>
              <div style={{ 
                padding: '0.25rem 0.75rem', 
                borderRadius: '20px', 
                backgroundColor: getStatusColor(problem.status),
                color: 'white',
                fontSize: '0.8rem',
                fontWeight: 'bold'
              }}>
                {getStatusText(problem.status)}
              </div>
            </div>
          </div>
        ))}

        {filteredProblems.length === 0 && (
          <div style={{ textAlign: 'center', padding: '2rem', color: '#666' }}>
            <p>–ü—Ä–æ–±–ª–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProblemsMapPage;